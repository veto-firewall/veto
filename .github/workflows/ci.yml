name: Quality Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  pull_request_target:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Code quality check with automatic annotations
  lint-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    # Skip this job for dependabot PRs in pull_request_target event
    if: ${{ !(github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Use the PR head for pull requests
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      # ESLint with auto-annotations
      - name: ESLint check
        run: npm run lint
        continue-on-error: true
      
      # Prettier format check
      - name: Prettier format check
        run: npm run format:check
        continue-on-error: true
        
      # Add a summary comment on PRs
      - name: Add summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const lintResult = process.env.LINT_RESULT === 'success';
            const formatResult = process.env.FORMAT_RESULT === 'success';
            
            const emoji = (success) => success ? '✅' : '❌';
            
            const body = `## Code Quality Summary
            
            | Check | Status |
            | ----- | ------ |
            | ESLint | ${emoji(lintResult)} |
            | Prettier | ${emoji(formatResult)} |
            
            ${(!lintResult || !formatResult) ? '⚠️ Please fix the issues before merging. You can run `npm run fix` locally to automatically fix many of these problems.' : '✅ All checks passed!'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  # Automatic fix job - runs on schedule or manual trigger
  auto-fix:
    name: Auto Fix Code Quality
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: lint-format
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Fix linting and formatting
        run: npm run fix
      
      - name: Check for changes
        id: git-check
        run: |
          git diff --exit-code || echo "has_changes=true" >> $GITHUB_OUTPUT
      
      - name: Commit and push changes
        if: steps.git-check.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git commit -am "style: auto-fix linting and formatting issues"
          git push

  # Build and test job - runs on all PRs and pushes
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    # Run for all PRs and pushes to main
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install web-ext
        run: npm install -g web-ext
        
      - name: Build
        run: npm run build
        
      - name: Web extension lint
        run: npm run web-ext:lint
          
      # Add comment for Dependabot PRs
      - name: Add result comment for Dependabot
        if: ${{ github.event_name == 'pull_request' && github.actor == 'dependabot[bot]' }}
        uses: actions/github-script@v7
        with:
          script: |
            const body = ${{ job.status }} === 'success' 
              ? '✅ Build and tests passed! This PR can be safely merged.'
              : '❌ Build or tests failed! Please review the logs and make necessary changes.';
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  # Process Dependabot security PRs - auto-approve and merge
  dependabot-auto:
    name: Process Dependabot PRs
    runs-on: ubuntu-latest
    needs: build-test
    if: ${{ github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]' }}
    
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      
      # Only process security updates or patch-level dependency updates
      - name: Process security patches
        if: ${{ contains(github.event.pull_request.title, 'security') || steps.metadata.outputs.update-type == 'version-update:semver-patch' }}
        run: |
          # Check if PR passed build tests
          PR_STATUS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs" \
            | jq -r '.check_runs[] | select(.name == "Build and Test") | .conclusion')
          
          if [[ "$PR_STATUS" == "success" ]]; then
            # Approve PR
            gh pr review --approve "$PR_URL"
            # Auto-merge
            gh pr merge --auto --squash "$PR_URL"
            echo "✅ Security update approved and queued for auto-merge"
          else
            echo "❌ Cannot approve/merge - build checks did not pass"
          fi
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
